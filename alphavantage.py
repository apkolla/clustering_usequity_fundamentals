# -*- coding: utf-8 -*-
"""alphavantage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OCxdoz2KdHYzOR48UqBUXO4mePzDIxdz
"""

!pip install alpha_vantage

from alpha_vantage.fundamentaldata import FundamentalData
import json
import pandas as pd
import requests
import time
import bs4 as bs
import datetime as dt
import io
import numpy as np
import time

apikey = 'GetYourOwn'

#loop to get a list of all ticker symbols in S&p500
resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies') #web page we are looking at
soup = bs.BeautifulSoup(resp.text, 'lxml') # we are going to parse it as lxml
table = soup.find('table', {'class': 'wikitable sortable'}) #find the wiki table on the page

tickers = []

for row in table.findAll('tr')[1:]:
    ticker = row.findAll('td')[0].text
    tickers.append(ticker)
    tickers = [s.replace('\n', "") for s in tickers]

#these two tickers do not return any day in the API so I will drop them here
tickers.remove('BF.B')
tickers.remove('BRK.B')

fd = FundamentalData(key = apikey, output_format='pandas')

#Take a look at the different variables available to us for the different reports. I will then choose only the variables I feel are relevant to the analysis
ticker = 'AAPL'
overview, o_meta = fd.get_company_overview(symbol = ticker)
income, i_meta = fd.get_income_statement_quarterly(symbol = ticker)
balance, b_meta = fd.get_balance_sheet_quarterly(symbol = ticker)
cashflow, c_meta = fd.get_cash_flow_quarterly(symbol = ticker)

print(overview.columns)
print(income.columns)
print(balance.columns)
print(cashflow.columns)

overview_cols = ['Symbol','MarketCapitalization', 'EBITDA', 'PERatio',
       'PEGRatio', 'BookValue', 'DividendPerShare', 'DividendYield', 'EPS',
       'GrossProfitTTM', 'DilutedEPSTTM', 'QuarterlyEarningsGrowthYOY',
       'QuarterlyRevenueGrowthYOY', 'TrailingPE', 'Beta']
income_cols = ['grossProfit','totalRevenue','costOfRevenue','operatingIncome','operatingExpenses','ebit','netIncome']
balance_cols = ['totalAssets','totalLiabilities','currentDebt','totalShareholderEquity']
cashflow_cols = ['operatingCashflow','capitalExpenditures','profitLoss','dividendPayout']

# The API will return four dataframes for each of the companies. I need to write a function that takes those dataframes and turns them into a sinigle line item in a new dataframe
def add_company(overview,income,balance,cahsflow):
  df = overview[overview_cols].copy()
  df[income_cols] = income[income_cols].iloc[0:1].reset_index(drop=True).copy()
  df[balance_cols] = balance[balance_cols].iloc[0:1].reset_index(drop=True).copy()
  df[cashflow_cols] = cashflow[cashflow_cols].iloc[0:1].reset_index(drop=True).copy()
  return df

dat = pd.DataFrame()
for ticker in tickers:

  overview, o_meta = fd.get_company_overview(symbol = ticker)
  income, i_meta = fd.get_income_statement_annual(symbol = ticker)
  balance, b_meta = fd.get_balance_sheet_annual(symbol = ticker)
  cashflow, c_meta = fd.get_cash_flow_annual(symbol = ticker)

  company = add_company(overview,income,balance,cashflow)
  dat = pd.concat([dat, company], ignore_index=True)
  time.sleep(1)

dat.head()

dat.shape

dat.to_csv('fundamentals.csv')